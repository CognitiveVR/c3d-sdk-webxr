declare const _default: CognitiveVRAnalyticsCore;
export default _default;
declare class CognitiveVRAnalyticsCore {
    config: {
        LOG: boolean;
        SDKVersion: string;
        networkHost: string;
        APIKey: string;
        networkVersion: string;
        sensorDataLimit: number;
        dynamicDataLimit: number;
        customEventBatchSize: number;
        gazeBatchSize: number;
        GazeInterval: number;
        allSceneData: import("./config.ts").SceneData[];
        HMDType?: string;
        sceneData(sceneName: string, sceneId: string, versionNumber: string): import("./config.ts").SceneData;
        set settings(newSettings: Partial</*elided*/ any>);
    };
    isSessionActive: boolean;
    sceneData: import("./config.ts").SceneData;
    userId: string;
    deviceId: string;
    sessionId: string;
    sessionTimestamp: string;
    newDeviceProperties: {};
    newUserProperties: {};
    lobbyId: string;
    devicePropertyMap: {
        AppName: string;
        AppVersion: string;
        AppEngine: string;
        AppEngineVersion: string;
        Browser: string;
        DeviceType: string;
        DeviceModel: string;
        DeviceMemory: string;
        DeviceOS: string;
        DevicePlatform: string;
        DeviceCPU: string;
        DeviceCPUCores: string;
        DeviceCPUVendor: string;
        DeviceGPU: string;
        DeviceGPUDriver: string;
        DeviceGPUVendor: string;
        DeviceGPUMemory: string;
        DeviceScreenHeight: string;
        DeviceScreenWidth: string;
        EyeTracking: string;
        HandTracking: string;
        NetworkEffectiveType: string;
        NetworkDownlink: string;
        NetworkRTT: string;
        SDKType: string;
        SDKVersion: string;
        VRModel: string;
        VRVendor: string;
    };
    getSessionTimestamp(): string;
    getCurrentScene(): import("./config.ts").SceneData;
    setScene(name: any): void;
    getTimestamp(): number;
    isSessionActive1(): boolean;
    getSessionId(): string;
    getSceneData(sceneName: any, sceneId: any, versionNumber: any): {
        sceneName: any;
        sceneId: any;
        versionNumber: any;
    };
    set setSessionId(id: any);
    set setUserId(id: any);
    set setDeviceId(id: any);
    set setSessionStatus(active: any);
    set setSessionTimestamp(value: any);
    setUserProperty(propertyType: any, value: any): void;
    setDeviceProperty(property: any, value: any): void;
    getApiKey(): string;
    devicePropertyString(property: any, value: any): any;
    resetNewUserDeviceProperties(): void;
    setLobbyId(id: any): void;
}
