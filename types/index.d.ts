export default C3D;
declare class C3D {
    constructor(settings: any, renderer?: null);
    core: {
        config: {
            LOG: boolean;
            SDKVersion: any;
            networkHost: string;
            APIKey: string;
            networkVersion: string;
            sensorDataLimit: number;
            dynamicDataLimit: number;
            customEventBatchSize: number;
            gazeBatchSize: number;
            GazeInterval: number;
            allSceneData: any[];
            sceneData(sceneName: any, sceneId: any, versionNumber: any): {
                sceneName: any;
                sceneId: any;
                versionNumber: any;
            };
            set settings(settings: any);
            HMDType: any;
        };
        isSessionActive: boolean;
        sceneData: any;
        userId: string;
        deviceId: string;
        sessionId: string;
        sessionTimestamp: string;
        newDeviceProperties: {};
        newUserProperties: {};
        lobbyId: string;
        devicePropertyMap: {
            AppName: string;
            AppVersion: string;
            AppEngine: string;
            AppEngineVersion: string;
            Browser: string;
            DeviceType: string;
            DeviceModel: string;
            DeviceMemory: string;
            DeviceOS: string;
            DevicePlatform: string;
            DeviceCPU: string;
            DeviceCPUCores: string;
            DeviceCPUVendor: string;
            DeviceGPU: string;
            DeviceGPUDriver: string;
            DeviceGPUVendor: string;
            DeviceGPUMemory: string;
            DeviceScreenHeight: string;
            DeviceScreenWidth: string;
            EyeTracking: string;
            HandTracking: string;
            NetworkEffectiveType: string;
            NetworkDownlink: string;
            NetworkRTT: string;
            SDKType: string;
            SDKVersion: string;
            VRModel: string;
            VRVendor: string;
        };
        getSessionTimestamp(): string;
        getCurrentScene(): any;
        setScene(name: any): void;
        getTimestamp(): number;
        isSessionActive1(): boolean;
        getSessionId(): string;
        getSceneData(sceneName: any, sceneId: any, versionNumber: any): {
            sceneName: any;
            sceneId: any;
            versionNumber: any;
        };
        set setSessionId(id: any);
        set setUserId(id: any);
        set setDeviceId(id: any);
        set setSessionStatus(active: any);
        set setSessionTimestamp(value: any);
        setUserProperty(propertyType: any, value: any): void;
        setDeviceProperty(property: any, value: any): void;
        getApiKey(): string;
        devicePropertyString(property: any, value: any): any;
        resetNewUserDeviceProperties(): void;
        setLobbyId(id: any): void;
    };
    xrSessionManager: XRSessionManager | null;
    lastInputType: string;
    network: Network;
    gaze: GazeTracker;
    customEvent: CustomEvent;
    hmdOrientation: HMDOrientationTracker;
    profiler: Profiler;
    controllerTracker: ControllerTracker;
    sensor: Sensor;
    exitpoll: ExitPoll;
    dynamicObject: DynamicObject;
    fpsTracker: FPSTracker;
    startSession(xrSession?: null): Promise<boolean>;
    endSession(): Promise<any>;
    /**
     * Checks the current primary input method.
     * @returns {'hand' | 'controller' | 'none'} The current input type.
     */
    getCurrentInputType(): "hand" | "controller" | "none";
    sceneData(name: any, id: any, version: any): {
        sceneName: any;
        sceneId: any;
        versionNumber: any;
    };
    config(property: any, value: any): void;
    addToAllSceneData(scene: any): void;
    setScene(name: any): void;
    set allSceneData(allSceneData: any);
    sendData(): Promise<any>;
    isSessionActive(): boolean;
    wasInitSuccessful(): boolean;
    getSessionTimestamp(): string;
    getSessionId(): string;
    getUserProperties(): {};
    getDeviceProperties(): {};
    set userId(userId: any);
    setUserProperty(property: any, value: any): void;
    setUserName(name: any): void;
    setSessionName(name: any): void;
    setLobbyId(id: any): void;
    setDeviceName(name: any): void;
    setDeviceProperty(property: any, value: any): void;
    set deviceId(deviceId: any);
    getApiKey(): string;
    getSceneId(): any;
}
import { XRSessionManager } from './utils/webxr';
import Network from './network';
import GazeTracker from './gazetracker';
import CustomEvent from './customevent';
import HMDOrientationTracker from './utils/HMDOrientation';
import Profiler from './utils/Profiler';
import ControllerTracker from './utils/ControllerTracker';
import Sensor from './sensors';
import ExitPoll from './exitpoll';
import DynamicObject from './dynamicobject';
import FPSTracker from './utils/Framerate';
